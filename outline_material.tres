[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]

resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 outline_color : hint_color;
uniform float outline_width = 2;

void fragment() {
	vec2 ps = TEXTURE_PIXEL_SIZE;
	
	float dx = ps.x * outline_width;
	float dy = ps.y * outline_width;
	
	float hs = 0.70711; // sqrt(2) / 2
	float hx = dx * hs;
	float hy = dy * hs;
	
	float a = (
		texture(TEXTURE, UV + vec2(dx, .0)).a +
		texture(TEXTURE, UV + vec2(-dx, .0)).a +
		texture(TEXTURE, UV + vec2(.0, dy)).a +
		texture(TEXTURE, UV + vec2(.0, -dy)).a +
		
		texture(TEXTURE, UV + vec2(hx, hy)).a +
		texture(TEXTURE, UV + vec2(-hx, hy)).a +
		texture(TEXTURE, UV + vec2(hx, -hy)).a +
		texture(TEXTURE, UV + vec2(-hx, -hy)).a
	);
	
	vec4 original = texture(TEXTURE, UV);
	float blend = max(0.0, a - 7.0);
	vec4 mixed = mix(outline_color, original, blend);
	COLOR = vec4(mixed.rgb, original.a);
}"
_sections_unfolded = [ "Resource" ]

[resource]

render_priority = 0
shader = SubResource( 1 )
shader_param/outline_color = null
shader_param/outline_width = 1.0
_sections_unfolded = [ "Resource", "shader_param" ]

